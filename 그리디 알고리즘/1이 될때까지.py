"""
문제 설명: 어따한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적 으로 선택 하여 수행 하려고 합니다.
단, 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
    1. N에서 1을 뻅니다.
    2. N을 K로 나눕니다.
N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행 해야 하는 최소 횟수를 구하는 프로그램을 작성하세요.

입력 조건: 첫째 줄에 N(1 <= N <= 100,000)과 K(2 <= K <= 100,000)가 공백을 기준으로 하여 각각 자연수로 주어집니다.
출력 조건: 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행 해야 하는 횟수의 최솟값을 출력합니다.

입력 예시 : 25 5 , 17 2
출력 예시 : 2
"""
# 내가 푼 방법
N, K = map(int, input().split())
count = 0


while N != 1:
    if N % K == 0:
        N = N // K
        count += 1

    else:
        N -= 1
        count += 1

print(count)

# 시간 복잡도를 고려한 문제 푼 방식
N, K = map(int, input().split())
result = 0

while True:
    # N이 K로 나누어 떨어지는 수가 될 떄까지 빼기
    target = (N // K) * K
    result += (N - target)
    N = target
    # N이 K보다 작을 때 반복문 탈출
    if N < K:
        break
    # K로 나누기
    result += 1
    N //= K

# 마지막으로 남은 수에 대하여 1씩 빼기
result += (N - 1)
print(result)